
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer xy_create_buffer
#define yy_delete_buffer xy_delete_buffer
#define yy_scan_buffer xy_scan_buffer
#define yy_scan_string xy_scan_string
#define yy_scan_bytes xy_scan_bytes
#define yy_init_buffer xy_init_buffer
#define yy_flush_buffer xy_flush_buffer
#define yy_load_buffer_state xy_load_buffer_state
#define yy_switch_to_buffer xy_switch_to_buffer
#define yypush_buffer_state xypush_buffer_state
#define yypop_buffer_state xypop_buffer_state
#define yyensure_buffer_stack xyensure_buffer_stack
#define yy_flex_debug xy_flex_debug
#define yyin xyin
#define yyleng xyleng
#define yylex xylex
#define yylineno xylineno
#define yyout xyout
#define yyrestart xyrestart
#define yytext xytext
#define yywrap xywrap
#define yyalloc xyalloc
#define yyrealloc xyrealloc
#define yyfree xyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define xy_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer xy_create_buffer
#endif

#ifdef yy_delete_buffer
#define xy_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer xy_delete_buffer
#endif

#ifdef yy_scan_buffer
#define xy_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer xy_scan_buffer
#endif

#ifdef yy_scan_string
#define xy_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string xy_scan_string
#endif

#ifdef yy_scan_bytes
#define xy_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes xy_scan_bytes
#endif

#ifdef yy_init_buffer
#define xy_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer xy_init_buffer
#endif

#ifdef yy_flush_buffer
#define xy_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer xy_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define xy_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state xy_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define xy_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer xy_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define xypush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state xypush_buffer_state
#endif

#ifdef yypop_buffer_state
#define xypop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state xypop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define xyensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack xyensure_buffer_stack
#endif

#ifdef yylex
#define xylex_ALREADY_DEFINED
#else
#define yylex xylex
#endif

#ifdef yyrestart
#define xyrestart_ALREADY_DEFINED
#else
#define yyrestart xyrestart
#endif

#ifdef yylex_init
#define xylex_init_ALREADY_DEFINED
#else
#define yylex_init xylex_init
#endif

#ifdef yylex_init_extra
#define xylex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra xylex_init_extra
#endif

#ifdef yylex_destroy
#define xylex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy xylex_destroy
#endif

#ifdef yyget_debug
#define xyget_debug_ALREADY_DEFINED
#else
#define yyget_debug xyget_debug
#endif

#ifdef yyset_debug
#define xyset_debug_ALREADY_DEFINED
#else
#define yyset_debug xyset_debug
#endif

#ifdef yyget_extra
#define xyget_extra_ALREADY_DEFINED
#else
#define yyget_extra xyget_extra
#endif

#ifdef yyset_extra
#define xyset_extra_ALREADY_DEFINED
#else
#define yyset_extra xyset_extra
#endif

#ifdef yyget_in
#define xyget_in_ALREADY_DEFINED
#else
#define yyget_in xyget_in
#endif

#ifdef yyset_in
#define xyset_in_ALREADY_DEFINED
#else
#define yyset_in xyset_in
#endif

#ifdef yyget_out
#define xyget_out_ALREADY_DEFINED
#else
#define yyget_out xyget_out
#endif

#ifdef yyset_out
#define xyset_out_ALREADY_DEFINED
#else
#define yyset_out xyset_out
#endif

#ifdef yyget_leng
#define xyget_leng_ALREADY_DEFINED
#else
#define yyget_leng xyget_leng
#endif

#ifdef yyget_text
#define xyget_text_ALREADY_DEFINED
#else
#define yyget_text xyget_text
#endif

#ifdef yyget_lineno
#define xyget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno xyget_lineno
#endif

#ifdef yyset_lineno
#define xyset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno xyset_lineno
#endif

#ifdef yywrap
#define xywrap_ALREADY_DEFINED
#else
#define yywrap xywrap
#endif

#ifdef yyalloc
#define xyalloc_ALREADY_DEFINED
#else
#define yyalloc xyalloc
#endif

#ifdef yyrealloc
#define xyrealloc_ALREADY_DEFINED
#else
#define yyrealloc xyrealloc
#endif

#ifdef yyfree
#define xyfree_ALREADY_DEFINED
#else
#define yyfree xyfree
#endif

#ifdef yytext
#define xytext_ALREADY_DEFINED
#else
#define yytext xytext
#endif

#ifdef yyleng
#define xyleng_ALREADY_DEFINED
#else
#define yyleng xyleng
#endif

#ifdef yyin
#define xyin_ALREADY_DEFINED
#else
#define yyin xyin
#endif

#ifdef yyout
#define xyout_ALREADY_DEFINED
#else
#define yyout xyout
#endif

#ifdef yy_flex_debug
#define xy_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug xy_flex_debug
#endif

#ifdef yylineno
#define xylineno_ALREADY_DEFINED
#else
#define yylineno xylineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define xywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 219
#define YY_END_OF_BUFFER 220
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[664] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  220,  218,
      215,  216,  214,  218,  214,    1,  218,  218,   79,   78,
      214,   79,   90,   90,  214,   82,  214,   82,  207,  214,
      218,  218,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  214,   85,
       86,    5,    6,    7,    7,   23,   22,   24,   26,   25,
       27,    1,   26,   31,   30,   32,   31,   29,   31,   28,
       37,   36,   38,   33,   34,   35,   41,   40,   42,   41,

       39,   41,   45,   44,   46,   43,   45,   53,   52,   54,
       51,   53,   57,   56,   58,   55,   57,   49,   48,   50,
       47,   49,   61,   60,   62,   61,   59,   65,   64,   66,
       63,   63,   65,   82,   76,    0,  211,    0,    0,    1,
      213,    0,    0,  203,    0,    0,    0,   71,   88,   88,
        2,   77,   92,   90,    0,    0,    0,   90,   83,   87,
       73,   84,   85,   74,   82,   82,   75,   86,  209,  207,
       69,  217,  217,  217,  217,  217,  217,  217,  217,  217,
        0,    0,  207,    0,  205,  203,  203,   98,  203,  203,
      203,  203,  203,  203,  118,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  147,  203,  151,  203,  203,  203,
      203,  203,  165,  167,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,   90,   90,    5,    4,
        3,    0,   29,    0,   28,   35,    0,   39,    0,   43,
        0,    0,   43,   51,    0,    0,   51,   55,    0,    0,
       55,   47,    0,    0,   47,    0,   59,    0,   59,   63,
        0,    0,   63,   63,   63,    0,    0,   73,   84,   85,
       74,    0,    0,  212,    0,    0,  212,    0,    0,  205,
      204,    0,    0,  204,   70,   88,    0,    0,   88,   91,
       92,    0,   90,   90,   83,   72,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,    0,    0,
      208,  209,  208,  203,   99,  203,  203,  203,  203,  203,
      203,  203,  203,  116,   80,  119,  203,  128,  203,  203,
      203,  203,  203,  139,  203,  143,  148,  203,  152,  153,
      203,  203,   80,  163,  166,  168,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  191,  203,  203,  203,  203,
      200,  203,   92,   90,    0,   90,   29,   39,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   63,   63,
       68,    0,   72,    0,    0,    0,    0,  211,    0,    0,
        0,    0,    0,    0,  203,  206,    0,    0,    0,  206,

       88,   88,   89,   92,    0,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,    0,    0,
        0,  210,    0,  207,  210,  203,  100,  102,  203,  203,
      203,  110,  203,  203,  117,   81,  120,  129,  203,  132,
      203,  135,  203,  140,  141,  144,  203,  203,  154,  203,
      157,  159,  161,  164,  203,  203,  203,  175,  177,  179,
      203,  203,  203,  187,  189,  192,  193,  203,  203,  199,
      201,  202,   91,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  217,   18,
      217,  217,  217,  217,  217,   12,  217,  217,  217,  217,

      217,    0,    0,  203,  101,  103,  104,  203,  108,  111,
      203,  203,  121,  203,  203,  203,  203,  133,  134,  136,
      203,  142,  203,  203,  155,  158,  160,  162,  203,  203,
      203,  176,  178,  180,  181,  203,  203,  188,  190,  194,
      203,  195,   94,   93,    0,    0,    0,    0,    0,  217,
       19,  217,  217,   16,  217,  217,  217,  217,  217,  217,
       15,    0,    0,  203,  105,  106,  109,  203,  114,  203,
      124,  126,  130,   95,  203,  203,  149,  156,  169,  171,
      203,  182,  203,  203,  197,  196,    0,   14,  217,  217,
       17,   13,  217,  217,  217,    8,   96,  107,  112,  115,

      203,  125,  127,  131,  137,  145,  150,  170,  172,  173,
      183,  185,  198,   67,  217,  217,  217,  217,  217,   97,
      113,  122,  138,  146,  174,  184,  186,  217,  217,  217,
      217,  217,  123,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,   10,  217,  217,  217,
      217,    9,  217,  217,   11,  217,  217,  217,  217,   21,
      217,   20,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,    4,   29,   30,   31,   30,   30,   32,   33,
       34,   34,   34,   34,   34,   34,   34,   34,   35,   34,
       34,   34,   36,   34,   34,   34,   34,   37,   34,   34,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   53,   69,   70,   71,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       73,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   74,    1,    1,    1,
        1,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,    1,   75,   75,   75,   75,   75,
       75,   75,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,    1,   76,   76,   76,
       76,   76,   76,   76,   76
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    4,
        5,    6,    1,    7,    1,    1,    8,    8,    9,   10,
       10,   10,   11,    1,    1,   12,   13,   14,    1,   15,
       15,   15,   15,   16,   16,   16,   17,    1,    4,   18,
        1,   19,    4,   20,   20,   15,   15,   15,   20,   16,
       16,   16,   16,   16,   16,   16,   17,   16,   16,   16,
       17,   16,   17,   16,   17,   16,   17,   16,    1,    1,
        1,    8,    1,    1,   21,   21,   22
    } ;

static const flex_int16_t yy_base[765] =
    {   0,
        0,    0,   75,   76,   78,   80,   82,   84,  103,    0,
      180,    0,  257,    0,  333,  407,  481,  555,  629,  703,
      777,  851,  925, 1000,  335,  339, 1577, 1576, 1601, 3493,
     3493, 3493, 1595,  338, 3493,    0, 1560,  335, 3493, 3493,
      369,   78,  382,  327,   72,  358,  369,  390, 1582, 1553,
      404,  355,  366, 1580,  409,  368,  367,  413,  423,  433,
      446,  328,  387,  434,  457,  473,  435,  331,  331, 3493,
     3493,    0, 3493, 1572, 1576, 3493, 3493, 3493, 3493, 3493,
     3493,    0, 1575, 3493, 3493, 3493,    0, 1566, 1076,  508,
     3493, 3493, 3493, 3493, 3493,    0, 3493, 3493, 3493,    0,

     1565, 1153, 3493, 3493, 3493,    0,   59, 3493, 3493, 3493,
        0,  449, 3493, 3493, 3493,    0,  459, 3493, 3493, 3493,
        0,  460, 3493, 3493, 3493,  451,    0, 3493, 3493, 3493,
      514,  486,  517,  526, 3493,  483, 3493, 1225, 1576,    0,
     3493,  526,  522, 1569, 1287, 1569,  574, 1561,  580,  546,
     3493, 3493,  586,  552,  592,  455,    0,  601, 1554, 3493,
     1560, 3493, 3493, 3493, 1552, 3493, 3493, 3493, 3493, 1563,
     3493,    0, 1526,  326, 1509,  505,  497,  562, 1506, 1508,
      590, 1349, 1549, 1517, 3493, 1547,  532,  508,  591,  570,
      389,  416,  593,  615, 1546,  623,  604,  624,  626,  443,

      485,  625,  629,  631, 1545,  632, 1544,  458,  628,  633,
      637,  634, 1543,  644,  638,  645,  643,  640,  646,  656,
      657,  658,  659,  663,  661,  664,  727,  701,    0, 3493,
     3493, 1543, 1535, 1416,  733,    0, 1541, 1533, 1493,    0,
      541,  706, 3493,    0,  655,  739, 3493,    0,  669,  748,
     3493,    0,  671,  761, 3493,  691, 3493,  766,    0,  745,
      711,    0,  769,  801,  779,  791,    0,  819,  811, 1518,
      828, 1510,  731,  735,  820, 1565, 3493,  823,    0, 3493,
      850,  849, 1604, 1536, 3493,  843,  742,    0,  852, 1529,
      870,  857,  775,    0, 3493, 3493, 1497, 1483, 1497, 1487,

      453, 1480, 1484, 1494, 1480, 1476, 1485, 1488,  876, 1634,
      792, 3493, 1518,  689, 3493,  732,  670,  667,  772,  765,
      804,  763,  843, 1517, 1516, 3493,  864, 1515,  847,  793,
      887,  888,  889, 1514,  891,  892, 3493,  894, 3493, 1513,
      896,  895,  897, 1512, 3493, 3493,  898,  899,  901,  908,
      902,  904,  905,  909,  936, 1511,  947,  918,  951,  982,
     1504,  944,  992,  921,  998, 1005, 3493, 3493,  902,    0,
      976,    0, 1011,    0, 1014,    0, 1017,    0,  911,    0,
     3493, 1509, 1068, 1479,  895, 1002, 1002, 3493, 1073, 1091,
     1678, 1049,    0,  926, 1501, 1087, 1107, 1110, 1717, 3493,

     1052,    0, 3493, 1102, 1113, 1460, 1463, 1458, 1437, 1440,
     1437, 1435, 1434, 1437, 1444, 1428, 1415, 1429, 1163, 1747,
     1036, 1098, 1150, 1464, 3493, 1087, 1463, 1462, 1097,  997,
     1127, 1461,  913, 1131, 3493, 3493, 1161, 3493, 1144, 1460,
     1163, 1459, 1178, 3493, 1458, 3493, 1174, 1164, 3493, 1183,
     1457, 1456, 1455, 3493, 1186, 1191, 1188, 1454, 1453, 1452,
     1192, 1189, 1185, 1451, 1450, 3493, 1449, 1190, 1187, 1448,
     3493, 1446, 3493, 1188,    0, 1194,    0, 1229,    0, 1232,
        0, 1235,    0, 1420, 1238,    0, 1245,    0, 1395,    0,
     1402, 1159, 1401, 1401, 1387,    0, 1392, 1380, 1403, 1392,

     1388, 1251,    0, 1231, 3493, 3493, 1424, 1251, 1423, 3493,
     1200, 1263, 3493, 1266, 1264, 1265, 1271, 3493, 1422, 3493,
     1268, 3493, 1269, 1272, 1421, 3493, 3493, 3493, 1273, 1277,
     1279, 3493, 3493, 3493, 1407, 1282, 1289, 3493, 3493, 3493,
     1275, 1403, 3493, 3493, 1385, 1282,    0, 1295,    0, 1363,
        0, 1365, 1362,    0, 1358, 1342, 1368, 1351, 1336, 1350,
        0, 1298,    0, 1284, 3493, 1388, 3493, 1294, 1387, 1283,
     1385, 1384, 1383, 3493, 1288, 1300, 1379, 3493, 1378, 1377,
     1316, 3493, 1317, 1313, 1375, 3493, 1357,    0, 1323, 1339,
        0,    0, 1316, 1318, 1328,    0, 1367, 3493, 1366, 3493,

     1327, 3493, 3493, 3493, 1365, 1364, 3493, 3493, 3493, 1361,
     1360, 1356, 3493, 3493, 1305, 1309, 1311, 1316, 1295, 3493,
     3493, 1345, 3493, 3493, 3493, 3493, 3493, 1305, 1294, 1286,
     1296, 1300, 3493, 1272, 1257, 1174, 1094, 1069, 1070, 1047,
      978,  960,  969,  939,  941,  867,    0,  775,  683,  628,
      586,    0,  535,  475,    0,  384,  357,  276,   48,    0,
       21,    0, 3493, 1796, 1818, 1840, 1862, 1884, 1906, 1928,
     1950, 1972, 1994, 2016, 2038, 2059, 2076, 2085, 2105, 2122,
     2143, 2165, 2180, 2191, 2211, 2226, 2237, 2258, 2270, 2291,
     2303, 2324, 2336, 2357, 2378, 2390, 2411, 2433, 2455, 2475,

     2495, 2517, 2530, 2545, 2552, 2572, 2594, 2611, 2632, 2654,
     2669, 2680, 2700, 2715, 2726, 2747, 2766, 2777, 2798, 2817,
     2828, 2849, 2868, 2879, 2900, 2919, 2939, 2958, 2969, 2981,
     3001, 3023, 3045, 3067, 3088, 3101, 3121, 3142, 3155, 3166,
     3172, 3192, 3214, 3230, 3242, 3253, 3264, 3275, 3286, 3304,
     3315, 3333, 3351, 3362, 3373, 3384, 3395, 3406, 3417, 3428,
     3439, 3450, 3461, 3472
    } ;

static const flex_int16_t yy_def[765] =
    {   0,
      663,    1,  664,  664,  665,  665,  666,  666,  663,    9,
      663,   11,  663,   13,  667,  667,  668,  668,  669,  669,
      670,  670,  671,  671,  672,  672,    1,    1,  663,  663,
      663,  663,  663,  673,  663,  674,  675,  676,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  677,  663,
      678,  679,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  663,  663,
      663,  681,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  674,  663,  663,  663,  663,  682,  683,  683,  683,
      663,  663,  663,  663,  663,  684,  663,  663,  663,  685,

      686,  686,  663,  663,  663,  687,  688,  663,  663,  663,
      689,  690,  663,  663,  663,  691,  692,  663,  663,  663,
      693,  694,  663,  663,  663,  695,  696,  663,  663,  663,
      663,  663,  663,  697,  663,  698,  663,  699,  699,  674,
      663,  700,  701,  663,  702,  702,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  703,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  704,
      663,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      706,  707,  663,  707,  663,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  663,  663,  709,  663,
      663,  710,  711,  711,  711,  712,  713,  714,  714,  715,
      716,  717,  663,  718,  719,  720,  663,  721,  722,  723,
      663,  724,  725,  726,  663,  727,  663,  728,  729,  663,
      663,  730,  663,  663,  663,  731,  732,  731,  731,  663,
      731,  733,  731,  734,  735,  735,  663,  663,  736,  663,
      737,  738,  738,  663,  663,  663,  663,  739,  663,  663,
      663,  663,  663,  740,  663,  663,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  742,  742,
      743,  663,  663,  744,  663,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  663,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  663,  744,  663,  744,
      744,  744,  744,  744,  663,  663,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  663,  663,  663,  663,  663,  663,  663,  745,
      663,  746,  663,  747,  663,  748,  663,  749,  663,  730,
      663,  732,  731,  663,  733,  733,  734,  663,  750,  735,
      735,  663,  751,  737,  663,  737,  752,  738,  738,  663,

      663,  739,  663,  663,  663,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  742,  742,
      743,  743,  753,  663,  663,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  663,  663,  744,  663,  744,  744,
      744,  744,  744,  663,  744,  663,  744,  744,  663,  744,
      744,  744,  744,  663,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  663,  744,  744,  744,  744,
      663,  744,  663,  663,  754,  663,  755,  663,  756,  663,
      757,  663,  758,  663,  663,  759,  663,  760,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  663,  761,  744,  663,  663,  744,  744,  744,  663,
      744,  744,  663,  744,  744,  744,  744,  663,  744,  663,
      744,  663,  744,  744,  744,  663,  663,  663,  744,  744,
      744,  663,  663,  663,  744,  744,  744,  663,  663,  663,
      744,  744,  663,  663,  663,  663,  762,  663,  763,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  663,  764,  744,  663,  744,  663,  744,  744,  744,
      744,  744,  744,  663,  744,  744,  744,  663,  744,  744,
      744,  663,  744,  744,  744,  663,  663,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  744,  663,  744,  663,

      744,  663,  663,  663,  744,  744,  663,  663,  663,  744,
      744,  744,  663,  663,  741,  741,  741,  741,  741,  663,
      663,  744,  663,  663,  663,  663,  663,  741,  741,  741,
      741,  741,  663,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,    0,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663
    } ;

static const flex_int16_t yy_nxt[3571] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   35,   36,   37,
       38,   35,   35,   39,   40,   35,   40,   41,   42,   43,
       44,   44,   44,   45,   35,   46,   47,   48,   35,   49,
       49,   49,   49,   49,   49,   49,   49,   50,   51,   35,
       35,   35,   52,   53,   54,   55,   56,   57,   58,   54,
       54,   59,   54,   54,   60,   61,   62,   63,   64,   54,
       65,   66,   67,   68,   54,   54,   54,   54,   35,   35,
       35,   69,   70,   71,   49,   54,   30,   73,   73,   77,
       78,   77,   78,   80,   81,   80,   81,  662,   74,   74,
       82,  151,   82,   75,   75,  159,  152,  242,  160,  661,

       83,  243,   83,   84,   85,   86,   84,   84,   84,   84,
       84,   84,   84,   87,   84,   84,   84,   84,   84,   88,
       89,   88,   90,   90,   90,   90,   84,   84,   84,   84,
       84,   84,   88,   88,   88,   88,   88,   88,   88,   88,
       84,   84,   84,   84,   88,   84,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   84,   84,   84,   88,   84,   84,   84,   84,   84,
       91,   92,   93,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   94,   91,   95,   91,   91,   96,

       96,   96,   96,   91,   91,   91,   91,   91,   91,   96,
       96,   96,   96,   96,   96,   96,   96,   91,   91,   91,
       91,   91,   91,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   97,   98,   99,
       97,   97,   97,   97,   97,   97,   97,  100,   97,   97,
       97,   97,   97,  101,  102,  101,  101,  101,  101,  101,
       97,   97,   97,   97,   97,   97,  101,  101,  101,  101,
      101,  101,  101,  101,   97,   97,   97,   97,  101,   97,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,   97,   97,   97,  101,   97,
       97,   97,   97,   97,  104,  105,  129,  130,  660,  185,
      129,  130,  185,  137,  153,  144,  158,  158,  158,  158,
      227,  228,  228,  228,  131,  132,  132,  132,  131,  132,
      132,  132,  106,  106,  106,  106,  106,  106,  106,  106,
      147,  147,  147,  145,  161,  107,  138,  185,  185,  185,
      298,  162,  299,  163,  164,  212,  148,  226,  149,  150,
      150,  150,  162,  182,  165,  166,  167,  183,  185,  153,

      185,  154,  154,  154,  155,  659,  133,  106,  104,  105,
      133,  146,  156,  162,  139,  193,  165,  168,  157,  194,
      185,  196,  187,  197,  185,  195,  156,  185,  188,  658,
      165,  184,  320,  198,  185,  213,  106,  106,  106,  106,
      106,  106,  106,  106,  185,  185,  185,  214,  157,  107,
      173,  174,  189,  175,  185,  176,  199,  185,  177,  190,
      200,  257,  178,  191,  201,  179,  192,  180,  185,  185,
      202,  205,  321,  203,  293,  293,  204,  215,  206,  207,
      208,  106,  109,  110,  185,  223,  332,  246,  137,  258,
      209,  247,  224,  210,  216,  225,  185,  250,  254,  410,

      217,  251,  255,  211,  218,  263,  263,  263,  263,  411,
      111,  111,  111,  111,  111,  111,  111,  111,  219,  315,
      220,  138,  657,  112,  340,  234,  221,  235,  235,  235,
      235,  267,  144,  260,  260,  260,  264,  265,  265,  265,
      222,  333,  268,  185,  261,  278,  278,  278,  303,  269,
      262,  270,  271,  301,  304,  111,  109,  110,  261,  139,
      145,  302,  279,  272,  273,  289,  289,  289,  289,  153,
      316,  154,  154,  154,  155,  147,  147,  147,  314,  242,
      262,  185,  656,  243,  111,  111,  111,  111,  111,  111,
      111,  111,  279,  149,  150,  150,  150,  112,  146,  286,

      286,  286,  185,  290,  185,  291,  291,  291,  291,  153,
      287,  155,  155,  155,  155,  185,  288,  292,  153,  305,
      158,  158,  158,  158,  287,  306,  185,  319,  182,  111,
      114,  115,  183,  292,  185,  185,  185,  185,  322,  185,
      185,  323,  185,  185,  185,  185,  288,  655,  185,  185,
      328,  185,  317,  318,  185,  346,  185,  185,  116,  116,
      116,  116,  116,  116,  116,  116,  184,  185,  185,  185,
      185,  117,  185,  341,  185,  185,  324,  330,  185,  325,
      331,  185,  329,  343,  327,  334,  335,  336,  654,  353,
      338,  347,  349,  246,  351,  342,  344,  247,  348,  352,

      185,  257,  350,  116,  114,  115,  357,  250,  355,  254,
      354,  251,  429,  255,  356,  362,  359,  428,  363,  358,
      366,  366,  366,  366,  360,  369,  369,  369,  361,  258,
      379,  379,  116,  116,  116,  116,  116,  116,  116,  116,
      388,  653,  370,  185,  363,  117,  364,  364,  364,  365,
      234,  426,  235,  235,  235,  235,  266,  156,  371,  371,
      371,  401,  401,  157,  260,  260,  260,  373,  373,  373,
      266,  156,  370,  389,  185,  372,  185,  116,  119,  120,
      375,  375,  375,  185,  374,  377,  377,  377,  263,  263,
      263,  263,  427,  157,  293,  293,  267,  376,  263,  263,

      263,  263,  378,  422,  185,  372,  121,  121,  121,  121,
      121,  121,  121,  121,  374,  185,  267,  433,  381,  122,
      260,  260,  260,  430,  267,  277,  431,  376,  272,  273,
      423,  261,  378,  267,  424,  383,  652,  262,  381,  390,
      390,  390,  392,  392,  392,  261,  381,  440,  272,  273,
      432,  121,  119,  120,  185,  381,  272,  273,  185,  284,
      395,  396,  286,  286,  286,  272,  273,  262,  398,  398,
      398,  289,  289,  289,  289,  185,  404,  404,  404,  404,
      121,  121,  121,  121,  121,  121,  121,  121,  397,  291,
      291,  291,  291,  122,  434,  419,  419,  419,  185,  185,

      185,  292,  185,  446,  439,  185,  185,  185,  436,  185,
      185,  437,  185,  185,  651,  185,  185,  292,  313,  185,
      185,  474,  474,  474,  185,  121,  124,  125,  405,  185,
      379,  379,  443,  386,  266,  126,  395,  447,  363,  450,
      364,  364,  364,  365,  453,  452,  445,  185,  441,  451,
      442,  448,  455,  458,  459,  185,  511,  464,  185,  457,
      456,  463,  185,  461,  397,  468,  460,  462,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  185,  465,  476,  476,  476,  469,  650,

      127,  124,  125,  467,  663,  649,  472,  388,  185,  473,
      126,  291,  291,  291,  291,  363,  648,  365,  365,  365,
      365,  647,  363,  292,  366,  366,  366,  366,  646,  470,
      478,  478,  478,  480,  480,  480,  482,  482,  482,  292,
      389,  385,  508,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  141,  141,
      141,  401,  401,  267,  423,  127,  233,  233,  424,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  485,  485,  485,  381,  277,  395,  185,  233,

      233,  233,  233,  233,  233,  272,  273,  645,  185,  486,
      136,  136,  136,  233,  233,  233,  233,  644,  233,  643,
      284,  404,  404,  404,  404,  397,  487,  487,  487,  143,
      143,  143,  404,  404,  404,  404,  423,  504,  185,  486,
      424,  642,  185,  488,  233,  233,  233,  507,  233,  233,
      233,  233,  233,  238,  238,  185,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  502,
      502,  502,  513,  488,  185,  185,  238,  238,  238,  238,
      238,  238,  181,  181,  181,  185,  503,  512,  509,  185,
      238,  238,  238,  238,  185,  238,  185,  185,  185,  185,

      185,  185,  185,  185,  517,  313,  514,  241,  241,  241,
      519,  185,  515,  245,  245,  245,  503,  552,  516,  641,
      553,  238,  238,  238,  524,  238,  238,  238,  238,  238,
      274,  531,  521,  541,  136,  136,  523,  525,  530,  535,
      536,  537,  185,  542,  275,  275,  275,  529,  249,  249,
      249,  253,  253,  253,  256,  256,  256,  546,  546,  546,
      568,  276,  185,  136,  548,  548,  548,  136,  136,  136,
      562,  562,  562,  136,  185,  185,  185,  185,  564,  185,
      185,  136,  185,  185,  185,  136,  185,  136,  185,  136,
      185,  276,  143,  185,  185,  185,  143,  281,  566,  185,

      185,  387,  387,  387,  640,  185,  282,  282,  282,  570,
      569,  185,  571,  572,  394,  394,  394,  421,  421,  421,
      579,  585,  575,  283,  185,  143,  576,  185,  185,  143,
      143,  143,  639,  573,  577,  143,  584,  580,  185,  581,
      597,  599,  583,  143,  601,  638,  637,  143,  636,  143,
      635,  143,  634,  283,  181,  605,  633,  632,  181,  181,
      606,  631,  630,  610,  611,  629,  628,  627,  309,  309,
      309,  626,  625,  612,  622,  624,  623,  621,  620,  619,
      618,  617,  616,  615,  614,  310,  613,  181,  609,  608,
      607,  311,  181,  181,  604,  603,  602,  181,  600,  598,

      596,  595,  594,  593,  592,  181,  591,  590,  589,  181,
      588,  181,  587,  181,  586,  310,  233,  233,  582,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  578,  574,  567,  565,  561,  560,  559,  233,
      233,  233,  233,  233,  233,  558,  557,  556,  555,  554,
      551,  550,  545,  233,  233,  233,  233,  544,  233,  543,
      540,  539,  538,  534,  533,  532,  528,  527,  526,  522,
      520,  518,  510,  506,  505,  169,  501,  500,  499,  498,
      497,  496,  495,  494,  233,  233,  233,  493,  233,  233,
      233,  233,  233,  238,  238,  492,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  238,  238,  238,  238,  491,
      490,  489,  185,  484,  266,  471,  238,  238,  238,  238,
      238,  238,  466,  454,  449,  444,  438,  436,  435,  425,
      238,  238,  238,  238,  418,  238,  417,  416,  415,  414,
      413,  412,  409,  408,  407,  406,  403,  400,  386,  384,
      239,  368,  234,  367,  345,  339,  337,  326,  185,  313,
      312,  238,  238,  238,  308,  238,  238,  238,  238,  238,
      277,  307,  300,  297,  169,  162,  296,  295,  285,  284,
      280,  277,  239,  234,  391,  391,  391,  391,  151,  231,
      230,  185,  171,  169,  391,  391,  391,  391,  142,  135,

      663,  134,  134,  663,  663,  663,  663,  663,  391,  391,
      391,  391,  391,  391,  284,  663,  663,  663,  663,  663,
      663,  663,  663,  399,  399,  399,  399,  663,  663,  663,
      663,  663,  663,  399,  399,  399,  399,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  399,  399,  399,
      399,  399,  399,  420,  420,  420,  420,  663,  663,  663,
      663,  663,  663,  420,  420,  420,  420,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  313,  420,  420,  420,
      420,  420,  420,  277,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  136,  136,  136,

      136,  663,  663,  663,  663,  663,  663,  136,  136,  136,
      136,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  136,  136,  136,  136,  136,  136,  284,  663,  663,
      663,  663,  663,  663,  663,  663,  143,  143,  143,  143,
      663,  663,  663,  663,  663,  663,  143,  143,  143,  143,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      143,  143,  143,  143,  143,  143,  181,  181,  181,  181,
      663,  663,  663,  663,  663,  663,  181,  181,  181,  181,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  313,
      181,  181,  181,  181,  181,  181,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  140,  663,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  170,  663,  663,  663,  170,  170,  663,  663,  663,
      170,  170,  170,  663,  170,  170,  170,  172,  663,  172,

      172,  172,  663,  663,  172,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  186,  663,  663,
      663,  186,  186,  663,  663,  663,  186,  186,  186,  663,
      186,  186,  186,  229,  663,  229,  229,  229,  229,  663,
      229,  663,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  232,  663,  232,  232,  663,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  233,  233,  233,
      233,  663,  663,  663,  233,  233,  233,  663,  233,  233,

      236,  236,  663,  663,  663,  236,  236,  236,  663,  663,
      236,  237,  663,  237,  237,  663,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  238,  238,  238,  238,  663,  663,  663,
      238,  238,  238,  663,  238,  238,  240,  240,  663,  663,
      663,  240,  240,  240,  663,  240,  240,  240,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  244,
      244,  663,  663,  663,  244,  244,  244,  663,  244,  244,
      244,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  248,  248,  663,  663,  663,  248,  248,  248,
      663,  248,  248,  248,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  252,  252,  663,  663,  663,
      252,  252,  252,  663,  252,  252,  252,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  259,

      259,  663,  663,  663,  259,  259,  259,  663,  259,  259,
      259,  266,  663,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  663,  266,  266,  266,  663,  266,
      266,  266,  266,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  141,  141,  141,
      663,  663,  663,  663,  141,  663,  663,  663,  663,  663,
      663,  141,  663,  663,  141,  143,  143,  143,  143,  143,

      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  294,
      294,  663,  663,  663,  294,  663,  663,  663,  663,  294,
      170,  663,  663,  663,  170,  170,  663,  663,  663,  170,
      170,  170,  663,  170,  170,  170,  172,  172,  172,  663,
      663,  172,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  186,  663,  663,  663,
      186,  186,  663,  663,  663,  186,  186,  186,  663,  186,
      186,  186,  229,  663,  229,  229,  229,  229,  663,  229,
      663,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  232,  663,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  233,  233,  233,  233,
      663,  663,  663,  233,  233,  233,  663,  233,  233,  236,
      236,  663,  663,  663,  236,  236,  236,  663,  663,  236,

      237,  663,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  238,  238,  238,  238,  663,  663,  663,  238,
      238,  238,  663,  238,  238,  240,  240,  663,  663,  663,
      240,  240,  240,  663,  240,  240,  240,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  663,  663,  663,  663,  241,  663,  663,  663,  663,
      663,  663,  241,  663,  663,  241,  244,  244,  663,  663,
      663,  244,  244,  244,  663,  244,  244,  244,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  663,  663,  663,  663,  245,  663,  663,  663,
      663,  663,  663,  245,  663,  663,  245,  248,  248,  663,
      663,  663,  248,  248,  248,  663,  248,  248,  248,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  663,  663,  663,  663,  249,  663,  663,
      663,  663,  663,  663,  249,  663,  663,  249,  252,  252,
      663,  663,  663,  252,  252,  252,  663,  252,  252,  252,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  663,  663,  663,  663,  253,  663,
      663,  663,  663,  663,  663,  253,  663,  663,  253,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  663,  663,  663,  663,  256,  663,  663,
      663,  663,  663,  663,  256,  663,  663,  256,  259,  259,
      663,  663,  663,  259,  259,  259,  663,  259,  259,  259,
      380,  380,  663,  663,  663,  380,  663,  663,  663,  663,

      380,  266,  663,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  663,  266,  266,  266,  266,  266,  663,  266,
      266,  266,  266,  382,  382,  663,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  663,  385,  385,  385,  385,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      393,  393,  663,  663,  663,  393,  663,  663,  663,  663,
      393,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  402,  402,  663,  663,  663,  402,
      663,  663,  663,  663,  402,  294,  294,  663,  663,  663,
      294,  663,  663,  663,  663,  294,  172,  172,  172,  663,
      663,  172,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      421,  421,  421,  421,  421,  186,  663,  663,  663,  186,
      186,  663,  663,  663,  186,  186,  186,  663,  186,  186,
      186,  475,  475,  663,  663,  663,  475,  663,  663,  663,
      663,  475,  477,  477,  663,  663,  663,  477,  663,  663,
      663,  663,  477,  479,  479,  663,  663,  663,  479,  663,
      663,  663,  663,  479,  481,  481,  663,  663,  663,  481,
      663,  663,  663,  663,  481,  483,  483,  663,  663,  663,

      483,  663,  663,  663,  663,  483,  387,  387,  387,  663,
      663,  663,  663,  387,  663,  663,  663,  663,  663,  663,
      387,  663,  663,  387,  141,  141,  663,  663,  663,  141,
      663,  663,  663,  663,  141,  394,  394,  394,  663,  663,
      663,  663,  394,  663,  663,  663,  663,  663,  663,  394,
      663,  663,  394,  421,  421,  421,  663,  663,  663,  663,
      421,  663,  663,  663,  663,  663,  663,  421,  663,  663,
      421,  241,  241,  663,  663,  663,  241,  663,  663,  663,
      663,  241,  245,  245,  663,  663,  663,  245,  663,  663,
      663,  663,  245,  249,  249,  663,  663,  663,  249,  663,

      663,  663,  663,  249,  253,  253,  663,  663,  663,  253,
      663,  663,  663,  663,  253,  256,  256,  663,  663,  663,
      256,  663,  663,  663,  663,  256,  547,  547,  663,  663,
      663,  547,  663,  663,  663,  663,  547,  549,  549,  663,
      663,  663,  549,  663,  663,  663,  663,  549,  563,  563,
      663,  663,  663,  563,  663,  663,  663,  663,  563,  387,
      387,  663,  663,  663,  387,  663,  663,  663,  663,  387,
      394,  394,  663,  663,  663,  394,  663,  663,  663,  663,
      394,  421,  421,  663,  663,  663,  421,  663,  663,  663,
      663,  421,   29,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663
    } ;

static const flex_int16_t yy_chk[3571] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        5,    6,    6,    7,    7,    8,    8,  661,    3,    4,
        7,   42,    8,    3,    4,   45,   42,  107,   45,  659,

        7,  107,    8,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   25,   25,  658,   62,
       26,   26,   68,   34,   44,   38,   44,   44,   44,   44,
       69,   69,   69,   69,   25,   25,   25,   25,   26,   26,
       26,   26,   15,   15,   15,   15,   15,   15,   15,   15,
       41,   41,   41,   38,   46,   15,   34,   53,   57,   56,
      174,   46,  174,   46,   46,   62,   41,   68,   41,   41,
       41,   41,   47,   52,   47,   47,   47,   52,   63,   43,

      191,   43,   43,   43,   43,  657,   25,   15,   16,   16,
       26,   38,   43,   48,   34,   56,   48,   48,   43,   56,
       55,   57,   53,   57,   58,   56,   43,  192,   53,  656,
       51,   52,  191,   57,   59,   63,   16,   16,   16,   16,
       16,   16,   16,   16,   60,   64,   67,   63,   43,   16,
       51,   51,   55,   51,  200,   51,   58,   61,   51,   55,
       58,  126,   51,   55,   58,   51,   55,   51,   65,  208,
       58,   59,  192,   58,  156,  156,   58,   64,   59,   59,
       60,   16,   17,   17,   66,   67,  200,  112,  136,  126,
       60,  112,   67,   61,   64,   67,  201,  117,  122,  301,

       65,  117,  122,   61,   65,  132,  132,  132,  132,  301,
       17,   17,   17,   17,   17,   17,   17,   17,   66,  188,
       66,  136,  654,   17,  208,   90,   66,   90,   90,   90,
       90,  134,  143,  131,  131,  131,  133,  133,  133,  133,
       66,  201,  134,  187,  131,  142,  142,  142,  177,  134,
      131,  134,  134,  176,  177,   17,   18,   18,  131,  136,
      143,  176,  142,  134,  134,  150,  150,  150,  150,  154,
      188,  154,  154,  154,  154,  147,  147,  147,  187,  241,
      131,  190,  653,  241,   18,   18,   18,   18,   18,   18,
       18,   18,  142,  147,  147,  147,  147,   18,  143,  149,

      149,  149,  189,  153,  193,  153,  153,  153,  153,  155,
      149,  155,  155,  155,  155,  197,  149,  153,  158,  178,
      158,  158,  158,  158,  149,  178,  194,  190,  181,   18,
       19,   19,  181,  153,  196,  198,  202,  199,  193,  209,
      203,  193,  204,  206,  210,  212,  149,  651,  211,  215,
      197,  218,  189,  189,  217,  214,  216,  219,   19,   19,
       19,   19,   19,   19,   19,   19,  181,  220,  221,  222,
      223,   19,  225,  209,  224,  226,  194,  199,  318,  194,
      199,  317,  198,  211,  196,  202,  203,  204,  650,  219,
      206,  214,  216,  245,  217,  210,  212,  245,  215,  218,

      314,  256,  216,   19,   20,   20,  223,  249,  221,  253,
      220,  249,  318,  253,  222,  226,  224,  317,  228,  223,
      228,  228,  228,  228,  225,  242,  242,  242,  225,  256,
      261,  261,   20,   20,   20,   20,   20,   20,   20,   20,
      274,  649,  242,  316,  227,   20,  227,  227,  227,  227,
      235,  314,  235,  235,  235,  235,  273,  227,  246,  246,
      246,  287,  287,  227,  260,  260,  260,  250,  250,  250,
      273,  227,  242,  274,  322,  246,  320,   20,   21,   21,
      254,  254,  254,  319,  250,  258,  258,  258,  263,  263,
      263,  263,  316,  227,  293,  293,  266,  254,  265,  265,

      265,  265,  258,  311,  330,  246,   21,   21,   21,   21,
       21,   21,   21,   21,  250,  321,  269,  322,  266,   21,
      264,  264,  264,  319,  268,  275,  320,  254,  266,  266,
      311,  264,  258,  271,  311,  268,  648,  264,  269,  275,
      275,  275,  278,  278,  278,  264,  268,  330,  269,  269,
      321,   21,   22,   22,  323,  271,  268,  268,  329,  282,
      281,  281,  286,  286,  286,  271,  271,  264,  282,  282,
      282,  289,  289,  289,  289,  327,  292,  292,  292,  292,
       22,   22,   22,   22,   22,   22,   22,   22,  281,  291,
      291,  291,  291,   22,  323,  309,  309,  309,  331,  332,

      333,  291,  335,  336,  329,  338,  342,  341,  343,  347,
      348,  327,  349,  351,  646,  352,  353,  291,  309,  350,
      354,  369,  369,  369,  433,   22,   23,   23,  292,  358,
      379,  379,  333,  385,  385,   23,  394,  336,  364,  341,
      364,  364,  364,  364,  343,  342,  335,  355,  331,  341,
      332,  338,  347,  350,  350,  362,  433,  354,  357,  349,
      348,  353,  359,  351,  394,  358,  350,  352,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,  360,  355,  371,  371,  371,  359,  645,

       23,   24,   24,  357,  386,  644,  362,  387,  430,  363,
       24,  363,  363,  363,  363,  365,  643,  365,  365,  365,
      365,  642,  366,  363,  366,  366,  366,  366,  641,  360,
      373,  373,  373,  375,  375,  375,  377,  377,  377,  363,
      387,  386,  430,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  392,  392,
      392,  401,  401,  383,  421,   24,   89,   89,  421,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,  389,  389,  389,  383,  390,  396,  426,   89,

       89,   89,   89,   89,   89,  383,  383,  640,  429,  389,
      390,  390,  390,   89,   89,   89,   89,  639,   89,  638,
      398,  404,  404,  404,  404,  396,  397,  397,  397,  398,
      398,  398,  405,  405,  405,  405,  422,  426,  431,  389,
      422,  637,  434,  397,   89,   89,   89,  429,   89,   89,
       89,   89,   89,  102,  102,  439,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  423,
      423,  423,  437,  397,  441,  448,  102,  102,  102,  102,
      102,  102,  419,  419,  419,  447,  423,  434,  431,  443,
      102,  102,  102,  102,  450,  102,  463,  455,  469,  457,

      462,  468,  456,  461,  439,  419,  437,  474,  474,  474,
      441,  511,  437,  476,  476,  476,  423,  492,  437,  636,
      492,  102,  102,  102,  448,  102,  102,  102,  102,  102,
      138,  457,  443,  468,  138,  138,  447,  450,  456,  461,
      462,  463,  504,  469,  138,  138,  138,  455,  478,  478,
      478,  480,  480,  480,  482,  482,  482,  485,  485,  485,
      511,  138,  508,  138,  487,  487,  487,  138,  138,  138,
      502,  502,  502,  138,  512,  515,  516,  514,  504,  521,
      523,  138,  517,  524,  529,  138,  541,  138,  530,  138,
      531,  138,  145,  536,  570,  564,  145,  145,  508,  575,

      537,  546,  546,  546,  635,  568,  145,  145,  145,  514,
      512,  576,  515,  516,  548,  548,  548,  562,  562,  562,
      529,  541,  521,  145,  584,  145,  523,  581,  583,  145,
      145,  145,  634,  517,  524,  145,  537,  530,  601,  531,
      564,  568,  536,  145,  570,  632,  631,  145,  630,  145,
      629,  145,  628,  145,  182,  575,  622,  619,  182,  182,
      576,  618,  617,  581,  583,  616,  615,  612,  182,  182,
      182,  611,  610,  584,  601,  606,  605,  599,  597,  595,
      594,  593,  590,  589,  587,  182,  585,  182,  580,  579,
      577,  182,  182,  182,  573,  572,  571,  182,  569,  566,

      560,  559,  558,  557,  556,  182,  555,  553,  552,  182,
      550,  182,  545,  182,  542,  182,  234,  234,  535,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  525,  519,  509,  507,  501,  500,  499,  234,
      234,  234,  234,  234,  234,  498,  497,  495,  494,  493,
      491,  489,  484,  234,  234,  234,  234,  472,  234,  470,
      467,  465,  464,  460,  459,  458,  453,  452,  451,  445,
      442,  440,  432,  428,  427,  424,  418,  417,  416,  415,
      414,  413,  412,  411,  234,  234,  234,  410,  234,  234,
      234,  234,  234,  239,  239,  409,  239,  239,  239,  239,

      239,  239,  239,  239,  239,  239,  239,  239,  239,  408,
      407,  406,  395,  384,  382,  361,  239,  239,  239,  239,
      239,  239,  356,  344,  340,  334,  328,  325,  324,  313,
      239,  239,  239,  239,  308,  239,  307,  306,  305,  304,
      303,  302,  300,  299,  298,  297,  290,  284,  272,  270,
      238,  237,  233,  232,  213,  207,  205,  195,  186,  184,
      183,  239,  239,  239,  180,  239,  239,  239,  239,  239,
      276,  179,  175,  173,  170,  165,  161,  159,  148,  146,
      144,  139,  101,   88,  276,  276,  276,  276,   83,   75,
       74,   54,   50,   49,  276,  276,  276,  276,   37,   33,

       29,   28,   27,    0,    0,    0,    0,    0,  276,  276,
      276,  276,  276,  276,  283,    0,    0,    0,    0,    0,
        0,    0,    0,  283,  283,  283,  283,    0,    0,    0,
        0,    0,    0,  283,  283,  283,  283,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  283,  283,  283,
      283,  283,  283,  310,  310,  310,  310,    0,    0,    0,
        0,    0,    0,  310,  310,  310,  310,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  310,  310,  310,  310,
      310,  310,  310,  391,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  391,  391,  391,

      391,    0,    0,    0,    0,    0,    0,  391,  391,  391,
      391,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  391,  391,  391,  391,  391,  391,  399,    0,    0,
        0,    0,    0,    0,    0,    0,  399,  399,  399,  399,
        0,    0,    0,    0,    0,    0,  399,  399,  399,  399,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      399,  399,  399,  399,  399,  399,  420,  420,  420,  420,
        0,    0,    0,    0,    0,    0,  420,  420,  420,  420,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  420,
      420,  420,  420,  420,  420,  420,  664,  664,  664,  664,

      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  674,    0,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  677,    0,    0,    0,  677,  677,    0,    0,    0,
      677,  677,  677,    0,  677,  677,  677,  678,    0,  678,

      678,  678,    0,    0,  678,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  680,    0,    0,
        0,  680,  680,    0,    0,    0,  680,  680,  680,    0,
      680,  680,  680,  681,    0,  681,  681,  681,  681,    0,
      681,    0,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  682,    0,  682,  682,    0,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  683,  683,  683,
      683,    0,    0,    0,  683,  683,  683,    0,  683,  683,

      684,  684,    0,    0,    0,  684,  684,  684,    0,    0,
      684,  685,    0,  685,  685,    0,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  686,  686,  686,  686,    0,    0,    0,
      686,  686,  686,    0,  686,  686,  687,  687,    0,    0,
        0,  687,  687,  687,    0,  687,  687,  687,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  688,  689,
      689,    0,    0,    0,  689,  689,  689,    0,  689,  689,
      689,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  691,  691,    0,    0,    0,  691,  691,  691,
        0,  691,  691,  691,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  693,  693,    0,    0,    0,
      693,  693,  693,    0,  693,  693,  693,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  696,

      696,    0,    0,    0,  696,  696,  696,    0,  696,  696,
      696,  697,    0,  697,  697,  697,  697,  697,  697,  697,
      697,  697,  697,  697,    0,  697,  697,  697,    0,  697,
      697,  697,  697,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  700,  700,  700,
        0,    0,    0,    0,  700,    0,    0,    0,    0,    0,
        0,  700,    0,    0,  700,  701,  701,  701,  701,  701,

      701,  701,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  701,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  703,
      703,    0,    0,    0,  703,    0,    0,    0,    0,  703,
      704,    0,    0,    0,  704,  704,    0,    0,    0,  704,
      704,  704,    0,  704,  704,  704,  705,  705,  705,    0,
        0,  705,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  707,  707,  707,  707,  707,  707,

      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  708,    0,    0,    0,
      708,  708,    0,    0,    0,  708,  708,  708,    0,  708,
      708,  708,  709,    0,  709,  709,  709,  709,    0,  709,
        0,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  710,    0,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  711,  711,  711,  711,
        0,    0,    0,  711,  711,  711,    0,  711,  711,  712,
      712,    0,    0,    0,  712,  712,  712,    0,    0,  712,

      713,    0,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713,  713,  714,  714,  714,  714,    0,    0,    0,  714,
      714,  714,    0,  714,  714,  715,  715,    0,    0,    0,
      715,  715,  715,    0,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  717,  717,
      717,    0,    0,    0,    0,  717,    0,    0,    0,    0,
        0,    0,  717,    0,    0,  717,  718,  718,    0,    0,
        0,  718,  718,  718,    0,  718,  718,  718,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  720,
      720,  720,    0,    0,    0,    0,  720,    0,    0,    0,
        0,    0,    0,  720,    0,    0,  720,  721,  721,    0,
        0,    0,  721,  721,  721,    0,  721,  721,  721,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      723,  723,  723,    0,    0,    0,    0,  723,    0,    0,
        0,    0,    0,    0,  723,    0,    0,  723,  724,  724,
        0,    0,    0,  724,  724,  724,    0,  724,  724,  724,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  726,  726,  726,    0,    0,    0,    0,  726,    0,
        0,    0,    0,    0,    0,  726,    0,    0,  726,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      728,  728,  728,    0,    0,    0,    0,  728,    0,    0,
        0,    0,    0,    0,  728,    0,    0,  728,  729,  729,
        0,    0,    0,  729,  729,  729,    0,  729,  729,  729,
      730,  730,    0,    0,    0,  730,    0,    0,    0,    0,

      730,  731,    0,  731,  731,  731,  731,  731,  731,  731,
      731,  731,    0,  731,  731,  731,  731,  731,    0,  731,
      731,  731,  731,  732,  732,    0,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,    0,  733,  733,  733,  733,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,

      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      736,  736,    0,    0,    0,  736,    0,    0,    0,    0,
      736,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  739,  739,    0,    0,    0,  739,
        0,    0,    0,    0,  739,  740,  740,    0,    0,    0,
      740,    0,    0,    0,    0,  740,  741,  741,  741,    0,
        0,  741,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  744,    0,    0,    0,  744,
      744,    0,    0,    0,  744,  744,  744,    0,  744,  744,
      744,  745,  745,    0,    0,    0,  745,    0,    0,    0,
        0,  745,  746,  746,    0,    0,    0,  746,    0,    0,
        0,    0,  746,  747,  747,    0,    0,    0,  747,    0,
        0,    0,    0,  747,  748,  748,    0,    0,    0,  748,
        0,    0,    0,    0,  748,  749,  749,    0,    0,    0,

      749,    0,    0,    0,    0,  749,  750,  750,  750,    0,
        0,    0,    0,  750,    0,    0,    0,    0,    0,    0,
      750,    0,    0,  750,  751,  751,    0,    0,    0,  751,
        0,    0,    0,    0,  751,  752,  752,  752,    0,    0,
        0,    0,  752,    0,    0,    0,    0,    0,    0,  752,
        0,    0,  752,  753,  753,  753,    0,    0,    0,    0,
      753,    0,    0,    0,    0,    0,    0,  753,    0,    0,
      753,  754,  754,    0,    0,    0,  754,    0,    0,    0,
        0,  754,  755,  755,    0,    0,    0,  755,    0,    0,
        0,    0,  755,  756,  756,    0,    0,    0,  756,    0,

        0,    0,    0,  756,  757,  757,    0,    0,    0,  757,
        0,    0,    0,    0,  757,  758,  758,    0,    0,    0,
      758,    0,    0,    0,    0,  758,  759,  759,    0,    0,
        0,  759,    0,    0,    0,    0,  759,  760,  760,    0,
        0,    0,  760,    0,    0,    0,    0,  760,  761,  761,
        0,    0,    0,  761,    0,    0,    0,    0,  761,  762,
      762,    0,    0,    0,  762,    0,    0,    0,    0,  762,
      763,  763,    0,    0,    0,  763,    0,    0,    0,    0,
      763,  764,  764,    0,    0,    0,  764,    0,    0,    0,
        0,  764,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Authors:
 *    Martin Henz <henz@iscs.nus.sg>
 *    Leif Kornstaedt <kornstae@ps.uni-sb.de>
 * 
 *  Copyright:
 *    Martin Henz and Leif Kornstaedt, 1996-2002
 * 
 *  Last change:
 *    $Date$ by $Author$
 *    $Revision$
 * 
 *  This file is part of Mozart, an implementation of Oz 3:
 *    http://www.mozart-oz.org
 * 
 *  See the file "LICENSE" or
 *    http://www.mozart-oz.org/LICENSE.html
 *  for information on usage and redistribution
 *  of this file, and for a DISCLAIMER OF ALL
 *  WARRANTIES.
 *
 */
#include <string.h>
#include <sys/stat.h>

#if !defined(__MINGW32__) && !defined(_MSC_VER)
#include <pwd.h>
#endif

#include "conf.h"
#include "base.hh"
#include "os.hh"
#include "dictionary.hh"
#include "am.hh"

#include "parser.hh"

void xyreportError(char const *kind, char const *message,
		   const char *file, int line, int column);
void xy_setScannerPrefix();
void xy_setParserExpect();

static const int maxFileNameSize = 256;
char xyFileName[maxFileNameSize];
char xyhelpFileName[maxFileNameSize];
OZ_Term xyFileNameAtom;

int xy_gumpSyntax, xy_allowDeprecated;
OZ_Term xy_errorMessages;

static int errorFlag;

//*******************
// THE INPUT ROUTINE
//*******************

int xylino;                             // current line number
char *xylastline;                       // remember where we have put the input

static inline int xycharno() {
  int n = xytext - xylastline;
  if (n > 0)
    return n;
  else
    return 0;
}

#undef YY_INPUT
#define YY_INPUT(buf, result, max_size)   xy_input(buf, result, max_size)

static void xy_input(char *buf, int &result, const int max_size) {
  xylastline = buf;

  // read one line into buf
  int curpos = 0;
  int c = fgetc(xyin);
  while(curpos < max_size && c != EOF && c != OZEOF && c != '\n') {
    buf[curpos++] = c;
    if (curpos < max_size)
      c = fgetc(xyin);
  }

  if (c == EOF || c == OZEOF) {
    if (curpos > 0)   // did we read other chars than EOF?
      result = curpos;
    else
      result = YY_NULL;
  } else {
    if (curpos < max_size)
      buf[curpos++] = c;
    result = curpos;
  }
}

//****************
// OUTPUT OF FLEX
//****************

#undef YY_DECL
#define YY_DECL static int xymylex()

//*************************
// CONDITIONAL COMPILATION
// uses a stack of flags;
// \ifdef and \ifndef push
// \else toggles top
// \endif pops.
//*************************

static OzDictionary *defines;

#define CONDITIONALMAXDEPTH 1000

static int conditional[CONDITIONALMAXDEPTH];
static int conditional_p;       // points to top of stack
static int conditional_basep;   // points to bottom of stack

static void push_cond(int flag) {
  if (conditional_p < CONDITIONALMAXDEPTH - 1)
    conditional[++conditional_p] = flag;
  else
    xyreportError("macro directive limitation",
		  "conditionals nested too deep",
		  xyFileName,xylino,xycharno());
}

static void pop_cond() {
  if (conditional_p > conditional_basep)
    conditional_p--;
  else
    xyreportError("macro directive error",
		  "\\endif without previous corresponding \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
}

static void toggle_cond() {
  if (conditional_p > conditional_basep) {
    // toggle top of flag stack
    if (conditional[conditional_p])
      conditional[conditional_p] = 0;
    else
      conditional[conditional_p] = 1;
  } else
    xyreportError("macro directive error",
		  "\\else without previous corresponding \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
}

static int get_cond() {
  int i = conditional_p;
  while (i > conditional_basep)
    if (!conditional[i--])
      return 0;
  return 1;
}

//***********************
// STACK OF FILE ENTRIES
// for \insert
//***********************

class XyFileEntry {
public:
  YY_BUFFER_STATE buffer;
  OZ_Term fileNameAtom;
  int lino;
  int conditional_basep;
  XyFileEntry *previous;

  XyFileEntry(YY_BUFFER_STATE b, OZ_Term f, int l, int c, XyFileEntry *p):
      buffer(b), fileNameAtom(f), lino(l), conditional_basep(c), previous(p) {}
};

static XyFileEntry *bufferStack;

static void push_insert(FILE *filep, char *fileName);
static int pop_insert();

//**********
// COMMENTS
//**********

static int commentdepth;
static OZ_Term commentfile;
static int commentlino;
static int commentoffset;
static int commentlastmode;

//*********************
// FILE NAME EXPANSION
//*********************

static char *getHomeUser(char *user) {
#ifdef WINDOWS
  return NULL;
#else
  struct passwd *pwentry = getpwnam(user);
  return pwentry != NULL? pwentry->pw_dir: (char *) NULL;
#endif
}

static int isReadableFile(char *file) {
  struct stat buf;

  if (access(file, F_OK) < 0 || stat(file, &buf) < 0)
    return 0;

  return !S_ISDIR(buf.st_mode);
}

static char *checkAccess(char *file) {
  char *ret = new char[strlen(file) + 1 + 3];

  strcpy(ret, file);
  if (isReadableFile(ret))
    return ret;

  strcat(ret, ".oz");
  if (isReadableFile(ret))
    return ret;

  delete[] ret;
  return NULL;
}

static char *scExpndFileName(char *fileName, char *curfile) {
  for (int i = 0; fileName[i] != '\0'; i++)
    if (fileName[i] == '\\')
      fileName[i] = '/';

  // full pathname given?
  if (fileName[0] == '/' ||
#ifdef WINDOWS
      (fileName[0] != '\0' && fileName[1] == ':') ||
      // good old DOS filename like E:...
#endif
      !strncmp(fileName, "./", 2))
    return checkAccess(fileName);

  // expand "~"
  if (fileName[0] == '~') {
    char *userhome;
    int len = 0;
    if (fileName[1] == '/') {
      userhome = osgetenv("HOME");
      len = 2;
    } else {
      char *rest = strchr(fileName, '/');
      if (rest == NULL)
	userhome = NULL;
      else {
	len = (rest + 1) - fileName;
	rest[0] = '\0';
	userhome = getHomeUser(&fileName[1]);
	rest[0] = '/';
      }
    }
    if (userhome == NULL)
      return NULL;

    char *help = new char[strlen(userhome) + 1 + strlen(&fileName[len]) + 1];
    sprintf(help, "%s/%s", userhome, &fileName[len]);
    char *ret = checkAccess(help);
    delete[] help;

    return ret;
  }

  // search in "current" directory
  if (curfile != NULL) {
    int i = strlen(curfile);
    while (i != 0 && curfile[i - 1] != '/')   // i. e., the dir part of curfile
      i--;
    if (i != 0) {
      char *help = new char[i + strlen(fileName) + 1];
      strncpy(help, curfile, i);
      strcpy(&help[i], fileName);
      char *ret = checkAccess(help);
      delete[] help;

      if (ret != NULL)
	return ret;
    }
  }

  // search in OZPATH
  char const *path = osgetenv("OZPATH");
  if (path == NULL)
    path = ".";

  while (path[0] != '\0') {
    int i;
    for (i = 0; path[i] != PathSeparator && path[i] != '\0'; i++);
    char *help = new char[i + 1 + strlen(fileName) + 1];
    strncpy(help, path, i);
    help[i] = '/';
    strcpy(&help[i + 1], fileName);
    char *ret = checkAccess(help);
    delete[] help;
    if (ret != NULL)
      return ret;
    if (path[i] == '\0')
      break;
    path = &path[i + 1];
  }

  return NULL;
}

//***************************
// TREATING STRINGS AND SUCH
//***************************

static void stripDot() {
  int i, j;
  for (i = 0; xytext[i] < '0' || xytext[i] > '9'; i++)
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
  for (j = 0; xytext[i] != '\0'; xytext[j++] = xytext[i++]);
  xytext[j] = '\0';
}

static void strip(char c) {
  if (xytext[0] == c) {
    int i = 1;
    while (xytext[i] != '\0') {
      xytext[i - 1] = xytext[i];
      i++;
    }
    xytext[i - 2] = '\0';
  }
}

static void stripRegex() {
  int i = 1;
  while (xytext[i] != '\0') {
    if (xytext[i] == '\n') {
      xylino++;
      xylastline = &xytext[i + 1];
    }
    xytext[i - 1] = xytext[i];
    i++;
  }
  xytext[i - 2] = '\0';
}

static void transBody(char c, char *text, int &i, int &j) {
  int jstart = j;
  while (text[j] != c) {
    if (text[j] == '\n')
      xylino++;
    if (text[j] == '\\') {
      j++;
      switch (text[j]) {
      case 'a':
	text[i] = '\a';
	break;
      case 'b':
	text[i] = '\b';
	break;
      case 'f':
	text[i] = '\f';
	break;
      case 'n':
	text[i] = '\n';
	break;
      case 'r':
	text[i] = '\r';
	break;
      case 't':
	text[i] = '\t';
	break;
      case 'v':
	text[i] = '\v';
	break;
      case 'x':
      case 'X':
	{ char hexstring[3];
	  hexstring[0] = text[++j];
	  hexstring[1] = text[++j];
	  hexstring[2] = '\0';
	  int hexnum = (int) strtol(hexstring, NULL, 16);
	  if (hexnum == 0 && get_cond())
	    xyreportError("lexical error",
			  "character in hexadecimal notation =< 0",
			  xyFileName,xylino,xycharno() + (j - jstart));
	  text[i] = hexnum;
	}
	break;
      case '\\':
      case '`':
      case '\"':
      case '\'':
      case '&':
	text[i] = text[j];
	break;
      default:
	{ char octstring[4];
	  octstring[0] = text[j++];
	  octstring[1] = text[j++];
	  octstring[2] = text[j];
	  octstring[3] = '\0';
	  int octnum = (int) strtol(octstring, NULL, 8);
	  if ((octnum == 0 || octnum > 255) && get_cond())
	    xyreportError("lexical error",
			  "character in octal notation =< 0 or >= 256",
			  xyFileName,xylino,xycharno() + (j - jstart));
	  text[i] = octnum & 0xFF;
	}
      }
    } else
      text[i] = text[j];
    i++;
    j++;
  }
}

static void stripTrans(char c) {
  if (xytext[0] == c) {
    int i = 0;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i] = '\0';
  }
}

static void trans(char c) {
  if (xytext[0] == c) {
    int i = 1;
    int j = 1;
    transBody(c, xytext, i, j);
    xytext[i++] = c;
    xytext[i] = '\0';
  }
}

#define INITIAL 0
#define COMMENT 1
#define IGNOREDIRECTIVE 2
#define DIRECTIVE 3
#define LINE 4
#define SWITCHDIR 5
#define INSERT 6
#define DEFINE 7
#define IFDEF 8
#define IFNDEF 9
#define UNDEF 10
#define SCANNERPREFIX 11
#define PARSEREXPECT 12
#define LEX 13

#ifndef YY_NO_UNISTD_H
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 664 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3493 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
YY_RULE_SETUP
{ commentdepth = 1;
				 commentfile = xyFileNameAtom;
				 commentlino = xylino;
				 commentoffset = xycharno();
				 commentlastmode = YYSTATE;
				 BEGIN(COMMENT);
			       }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ commentdepth++; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ if (--commentdepth == 0)
				   BEGIN(commentlastmode);
			       }
	YY_BREAK
case 5:
YY_RULE_SETUP
;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{ xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case 7:
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{ if (get_cond()) {
				   const char *file = OZ_atomToC(commentfile);
				   xyreportError("lexical error",
						 "unterminated comment",
						 file,commentlino,commentoffset);
				 }
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ BEGIN(SWITCHDIR); return T_SWITCH; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_PUSHSWITCHES; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_POPSWITCHES; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ BEGIN(DIRECTIVE); return T_LOCALSWITCHES; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ if (get_cond()) BEGIN(LINE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ BEGIN(INSERT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ BEGIN(DEFINE); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ BEGIN(UNDEF); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN(IFDEF); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ BEGIN(IFNDEF); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ toggle_cond();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ pop_cond();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN(SCANNERPREFIX); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN(PARSEREXPECT); }
	YY_BREAK

case 22:
YY_RULE_SETUP
;
	YY_BREAK
case 23:
YY_RULE_SETUP
;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{ BEGIN(INITIAL);
				 xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case YY_STATE_EOF(IGNOREDIRECTIVE):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 25:
YY_RULE_SETUP
;
	YY_BREAK
case 26:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(DIRECTIVE):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 28:
YY_RULE_SETUP
{ xylino = atol(xytext) - 1; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ strip('\'');
				 char *fullname = scExpndFileName(xytext,xyFileName);
				 if (fullname != NULL) {
				   strncpy(xyFileName, fullname, maxFileNameSize - 1);
				   delete[] fullname;
				 } else
				   strncpy(xyFileName, xytext, maxFileNameSize - 1);
				 xyFileName[maxFileNameSize - 1] = '\0';
				 xyFileNameAtom = OZ_atom(xyFileName);
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 30:
YY_RULE_SETUP
;
	YY_BREAK
case 31:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(LINE):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 33:
YY_RULE_SETUP
{ return '+'; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return '-'; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return T_SWITCHNAME; }
	YY_BREAK
case 36:
YY_RULE_SETUP
;
	YY_BREAK
case 37:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(SWITCHDIR):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 39:
YY_RULE_SETUP
{ if (get_cond()) {
				   strip('\'');
				   char *fullname = scExpndFileName(xytext,xyFileName);
				   if (fullname != NULL) {
				     OZ_Term coord =
				       OZ_mkTupleC("pos",3,xyFileNameAtom,
						   OZ_int(xylino),
						   OZ_int(xycharno()));
				     xy_errorMessages =
				       oz_cons(OZ_mkTupleC("logInsert",2,
							   OZ_atom(fullname),
							   coord),
					       xy_errorMessages);
				     FILE *filep = fopen(fullname, "r");
				     push_insert(filep, fullname);
				     delete[] fullname;
				     BEGIN(INITIAL);
				   } else {
				     const char *s =
				       "could not open file `";
				     char *f = new char[strlen(s) + 1 +
							strlen(xytext) + 2];
				     strcpy(f,s);
				     strcat(f,xytext);
				     strcat(f,"'");
				     xyreportError("macro directive error",f,
						   xyFileName,xylino,xycharno());
				     delete[] f;
				     BEGIN(DIRECTIVE);
				   }
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 40:
YY_RULE_SETUP
;
	YY_BREAK
case 41:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(INSERT):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
{ if (get_cond()) {
				   trans('`');
				   OZ_Term key = OZ_atom(xytext);
				   defines->setArg(key, NameTrue);
				   BEGIN(DIRECTIVE);
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 44:
YY_RULE_SETUP
;
	YY_BREAK
case 45:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(DEFINE):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
{ if (get_cond()) {
				   trans('`');
				   defines->remove(OZ_atom(xytext));
				   BEGIN(DIRECTIVE);
				 } else
				   BEGIN(INITIAL);
			       }
	YY_BREAK
case 48:
YY_RULE_SETUP
;
	YY_BREAK
case 49:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{ if (errorFlag)
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(UNDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{ trans('`');
				 OZ_Term key = OZ_atom(xytext);
				 push_cond(OZ_isTrue(defines->member(key)));
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 52:
YY_RULE_SETUP
;
	YY_BREAK
case 53:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(IFDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{ trans('`');
				 OZ_Term key = OZ_atom(xytext);
				 push_cond(!OZ_isTrue(defines->member(key)));
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 56:
YY_RULE_SETUP
;
	YY_BREAK
case 57:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(IFNDEF):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{ stripTrans('\'');
				 xy_setScannerPrefix();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 60:
YY_RULE_SETUP
;
	YY_BREAK
case 61:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(SCANNERPREFIX):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 63:
YY_RULE_SETUP
{ xy_setParserExpect();
				 BEGIN(DIRECTIVE);
			       }
	YY_BREAK
case 64:
YY_RULE_SETUP
;
	YY_BREAK
case 65:
YY_RULE_SETUP
{ errorFlag = 1; }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
{ if (errorFlag && get_cond())
				   xyreportError("directive error",
						 "illegal directive syntax",
						 xyFileName,xylino,xycharno());
				 errorFlag = 0;
				 xylino++;
				 xylastline = xytext + 1;
				 BEGIN(INITIAL);
			       }
	YY_BREAK
case YY_STATE_EOF(PARSEREXPECT):
{ if (get_cond())
				   xyreportError("directive error",
						 "unterminated directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK

case 67:
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_REGEX; }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{ BEGIN(INITIAL); stripRegex(); return T_REGEX; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return T_CHOICE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return T_LDOTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return T_2DOTS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return T_ITER; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return T_OOASSIGN; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return T_DEFAULT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return T_REDUCE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return T_DEREFF; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return T_SEP; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return T_ADD; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return T_FDMUL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return T_OTHERMUL; }
	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OTHERMUL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return T_COMPARE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return T_FDIN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return T_FDCOMPARE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return T_LMACRO; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return T_RMACRO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ return T_COLONEQUALS; }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
{ // Hack to avoid strange parsing of X.1.1:
				 // If "." is followed by integer, then
				 // a special token is returned.
				 // If this rule would not be there, the
				 // resulting tokens would be "X" "." "1.1",
				 // where the last one is a float.
				 // Caveat: Comments are not allowed
				 //         between . and number.
				 stripDot(); return T_DOTINT; }
	YY_BREAK
case 89:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ // Hack to avoid parsing error for a(b:1...):
				 // If int is followed by ..., int is returned.
				 // If this rule would not be there, the rule
				 // for floats would match and an error would
				 // occur.
				 return T_OZINT; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return T_OZINT; }
	YY_BREAK
case 91:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_OZINT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return T_OZFLOAT; }
	YY_BREAK
case 93:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_UNIT_LABEL; }
	YY_BREAK
case 94:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_TRUE_LABEL; }
	YY_BREAK
case 95:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FALSE_LABEL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return T_andthen; }
	YY_BREAK
case 97:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_andthen; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return T_at; }
	YY_BREAK
case 99:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_at; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return T_attr; }
	YY_BREAK
case 101:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_attr; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return T_case; }
	YY_BREAK
case 103:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_case; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return T_catch; }
	YY_BREAK
case 105:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_catch; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return T_choice; }
	YY_BREAK
case 107:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_choice; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return T_class; }
	YY_BREAK
case 109:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_class; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return T_cond; }
	YY_BREAK
case 111:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_cond; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ return T_declare; }
	YY_BREAK
case 113:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_declare; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ return T_define; }
	YY_BREAK
case 115:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_define; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ return T_dis; }
	YY_BREAK
case 117:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_dis; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ return T_do; }
	YY_BREAK
case 119:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_do; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ return T_else; }
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_else; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ return T_elsecase; }
	YY_BREAK
case 123:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elsecase; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ return T_elseif; }
	YY_BREAK
case 125:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseif; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ return T_elseof; }
	YY_BREAK
case 127:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_elseof; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ return T_end; }
	YY_BREAK
case 129:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_end; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return T_export; }
	YY_BREAK
case 131:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_export; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return T_fail; }
	YY_BREAK
case 133:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fail; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ return T_false; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ return T_feat; }
	YY_BREAK
case 136:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_feat; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ return T_finally; }
	YY_BREAK
case 138:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_finally; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ return T_FOR; }
	YY_BREAK
case 140:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_FOR; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return T_from; }
	YY_BREAK
case 142:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_from; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ return T_fun; }
	YY_BREAK
case 144:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_fun; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return T_functor; }
	YY_BREAK
case 146:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_functor; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ return T_if; }
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_if; }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ return T_import; }
	YY_BREAK
case 150:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_import; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ return T_in; }
	YY_BREAK
case 152:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_in; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_OZATOM; }
	YY_BREAK
case 154:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (xy_gumpSyntax) { BEGIN(LEX); return T_lex; } else return T_ATOM_LABEL; }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ return T_local; }
	YY_BREAK
case 156:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_local; }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ return T_lock; }
	YY_BREAK
case 158:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_lock; }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ return T_meth; }
	YY_BREAK
case 160:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_meth; }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_OZATOM; }
	YY_BREAK
case 162:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_mode: T_ATOM_LABEL; }
	YY_BREAK
case 163:
YY_RULE_SETUP
{ return T_not; }
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_not; }
	YY_BREAK
case 165:
YY_RULE_SETUP
{ return T_of; }
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_of; }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ return T_or; }
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_or; }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ return T_orelse; }
	YY_BREAK
case 170:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_orelse; }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_OZATOM; }
	YY_BREAK
case 172:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_parser: T_ATOM_LABEL; }
	YY_BREAK
case 173:
YY_RULE_SETUP
{ return T_prepare; }
	YY_BREAK
case 174:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prepare; }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return T_proc; }
	YY_BREAK
case 176:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_proc; }
	YY_BREAK
case 177:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_OZATOM; }
	YY_BREAK
case 178:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_prod: T_ATOM_LABEL; }
	YY_BREAK
case 179:
YY_RULE_SETUP
{ return T_prop; }
	YY_BREAK
case 180:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_prop; }
	YY_BREAK
case 181:
YY_RULE_SETUP
{ return T_raise; }
	YY_BREAK
case 182:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_raise; }
	YY_BREAK
case 183:
YY_RULE_SETUP
{ return T_require; }
	YY_BREAK
case 184:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_require; }
	YY_BREAK
case 185:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_OZATOM; }
	YY_BREAK
case 186:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_scanner: T_ATOM_LABEL; }
	YY_BREAK
case 187:
YY_RULE_SETUP
{ return T_self; }
	YY_BREAK
case 188:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_self; }
	YY_BREAK
case 189:
YY_RULE_SETUP
{ return T_skip; }
	YY_BREAK
case 190:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_skip; }
	YY_BREAK
case 191:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_OZATOM; }
	YY_BREAK
case 192:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_syn: T_ATOM_LABEL; }
	YY_BREAK
case 193:
YY_RULE_SETUP
{ return T_then; }
	YY_BREAK
case 194:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_then; }
	YY_BREAK
case 195:
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_OZATOM; }
	YY_BREAK
case 196:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return xy_gumpSyntax? T_token: T_ATOM_LABEL; }
	YY_BREAK
case 197:
YY_RULE_SETUP
{ return T_thread; }
	YY_BREAK
case 198:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_thread; }
	YY_BREAK
case 199:
YY_RULE_SETUP
{ return T_true; }
	YY_BREAK
case 200:
YY_RULE_SETUP
{ return T_try; }
	YY_BREAK
case 201:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ return T_try; }
	YY_BREAK
case 202:
YY_RULE_SETUP
{ return T_unit; }
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
{ stripTrans('\''); return T_OZATOM; }
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_OZATOM;}
	YY_BREAK
case 205:
/* rule 205 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ stripTrans('\''); return T_ATOM_LABEL; }
	YY_BREAK
case 206:
/* rule 206 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal atom syntax",xyFileName,xylino,xycharno()); return T_ATOM_LABEL;}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE; }
	YY_BREAK
case 208:
/* rule 208 can match eol */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
	YY_BREAK
case 209:
/* rule 209 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ trans('`'); return T_VARIABLE_LABEL; }
	YY_BREAK
case 210:
/* rule 210 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal variable syntax",xyFileName,xylino,xycharno()); return T_VARIABLE;}
	YY_BREAK
case 211:
/* rule 211 can match eol */
YY_RULE_SETUP
{ stripTrans('\"'); return T_STRING; }
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
{ if (get_cond()) xyreportError("lexical error","illegal string syntax",xyFileName,xylino,xycharno()); return T_STRING;}
	YY_BREAK
case 213:
/* rule 213 can match eol */
YY_RULE_SETUP
{ int i = 0;
				 int j = 1;
				 transBody(0, xytext, i, j);
				 return T_AMPER;
			       }
	YY_BREAK
case 214:
YY_RULE_SETUP
{
				 return xytext[0];
			       }
	YY_BREAK
case 215:
YY_RULE_SETUP
;
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
{ xylino++;
				 xylastline = xytext + 1;
			       }
	YY_BREAK
case 217:
YY_RULE_SETUP
{ if (get_cond())
				   xyreportError("lexical error",
						 "unknown directive",
						 xyFileName,xylino,xycharno());
				 BEGIN(IGNOREDIRECTIVE);
			       }
	YY_BREAK
case 218:
YY_RULE_SETUP
{ if (get_cond())
				   xyreportError("lexical error",
						 "illegal character",
						 xyFileName,xylino,xycharno());
			       }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LEX):
{ BEGIN(DIRECTIVE);
				 if (pop_insert())
				   return T_ENDOFFILE;
			       }
	YY_BREAK
case 219:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 77);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 664 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 77;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 664 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 663);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void push_insert(FILE *filep, char *fileName)
{
  bufferStack = new XyFileEntry(YY_CURRENT_BUFFER, xyFileNameAtom, xylino,
				conditional_basep, bufferStack);
  strncpy(xyFileName, fileName, maxFileNameSize - 1);
  xyFileName[maxFileNameSize - 1] = '\0';
  xyFileNameAtom = OZ_atom(fileName);
  xyin = filep;
  BEGIN(INITIAL);
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  xylino = 1;
  conditional_basep = conditional_p;
}

static int pop_insert() {
  if (conditional_p > conditional_basep)
    xyreportError("macro directive error",
		  "unterminated \\ifdef or \\ifndef",
		  xyFileName,xylino,xycharno());
  errorFlag = 0;
  if (bufferStack != NULL) {
    fclose(xyin);
    xy_switch_to_buffer(bufferStack->buffer);
    xyFileNameAtom = bufferStack->fileNameAtom;
    const char *fileName = OZ_atomToC(xyFileNameAtom);
    strncpy(xyFileName, fileName, maxFileNameSize - 1);
    xyFileName[maxFileNameSize - 1] = '\0';
    xylino = bufferStack->lino;
    conditional_basep = bufferStack->conditional_basep;
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
    return 0;
  } else
    return 1;
}

static void xy_init(OZ_Term defines0) {
  xylino = 1;
  errorFlag = 0;

  bufferStack = NULL;

  defines = tagged2Dictionary(OZ_deref(defines0));
  conditional_p = 0;
  conditional_basep = 0;
  commentdepth = 0;

  BEGIN(INITIAL);
}

int xy_init_from_file(char *file, OZ_Term defines) {
  char *fullname = scExpndFileName(file, NULL);
  if (fullname == NULL)
    return 0;
  xy_errorMessages = oz_cons(OZ_mkTupleC("logInsert",1,OZ_atom(fullname)),
			     AtomNil);
  xyin = fopen(fullname, "r");
  if (xyin == NULL)
    return 0;
  xy_switch_to_buffer(xy_create_buffer(xyin, YY_BUF_SIZE));
  strncpy(xyFileName,fullname,maxFileNameSize - 1);
  xyFileName[maxFileNameSize - 1] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  delete[] fullname;
  xy_init(defines);
  return 1;
}

void xy_init_from_string(char *str, OZ_Term defines) {
  xy_errorMessages = AtomNil;
  xyFileName[0] = '\0';
  xyFileNameAtom = OZ_atom(xyFileName);
  xyin = NULL;
  xy_scan_string(str);
  xylastline = YY_CURRENT_BUFFER->yy_ch_buf;
  xy_init(defines);
}

char *xy_expand_file_name(char *file) {
  return scExpndFileName(file, NULL);
}

void xy_exit() {
  xy_delete_buffer(YY_CURRENT_BUFFER);
  while (bufferStack != NULL) {
    XyFileEntry *old = bufferStack;
    bufferStack = bufferStack->previous;
    delete old;
  }
  if (xyin)
    fclose(xyin);
}

int xylex() {
  int next = xymylex();
  if (get_cond() || next == 0 || next == T_ENDOFFILE)
    return next;
  else
    return xylex();
}

